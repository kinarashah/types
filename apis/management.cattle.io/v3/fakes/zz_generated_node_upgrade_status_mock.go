// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockNodeUpgradeStatusListerMockGet  sync.RWMutex
	lockNodeUpgradeStatusListerMockList sync.RWMutex
)

// Ensure, that NodeUpgradeStatusListerMock does implement NodeUpgradeStatusLister.
// If this is not the case, regenerate this file with moq.
var _ v3.NodeUpgradeStatusLister = &NodeUpgradeStatusListerMock{}

// NodeUpgradeStatusListerMock is a mock implementation of NodeUpgradeStatusLister.
//
//     func TestSomethingThatUsesNodeUpgradeStatusLister(t *testing.T) {
//
//         // make and configure a mocked NodeUpgradeStatusLister
//         mockedNodeUpgradeStatusLister := &NodeUpgradeStatusListerMock{
//             GetFunc: func(namespace string, name string) (*v3.NodeUpgradeStatus, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.NodeUpgradeStatus, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedNodeUpgradeStatusLister in code that requires NodeUpgradeStatusLister
//         // and then make assertions.
//
//     }
type NodeUpgradeStatusListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.NodeUpgradeStatus, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.NodeUpgradeStatus, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *NodeUpgradeStatusListerMock) Get(namespace string, name string) (*v3.NodeUpgradeStatus, error) {
	if mock.GetFunc == nil {
		panic("NodeUpgradeStatusListerMock.GetFunc: method is nil but NodeUpgradeStatusLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockNodeUpgradeStatusListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockNodeUpgradeStatusListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedNodeUpgradeStatusLister.GetCalls())
func (mock *NodeUpgradeStatusListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockNodeUpgradeStatusListerMockGet.RLock()
	calls = mock.calls.Get
	lockNodeUpgradeStatusListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *NodeUpgradeStatusListerMock) List(namespace string, selector labels.Selector) ([]*v3.NodeUpgradeStatus, error) {
	if mock.ListFunc == nil {
		panic("NodeUpgradeStatusListerMock.ListFunc: method is nil but NodeUpgradeStatusLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockNodeUpgradeStatusListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockNodeUpgradeStatusListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedNodeUpgradeStatusLister.ListCalls())
func (mock *NodeUpgradeStatusListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockNodeUpgradeStatusListerMockList.RLock()
	calls = mock.calls.List
	lockNodeUpgradeStatusListerMockList.RUnlock()
	return calls
}

var (
	lockNodeUpgradeStatusControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockNodeUpgradeStatusControllerMockAddClusterScopedHandler        sync.RWMutex
	lockNodeUpgradeStatusControllerMockAddFeatureHandler              sync.RWMutex
	lockNodeUpgradeStatusControllerMockAddHandler                     sync.RWMutex
	lockNodeUpgradeStatusControllerMockEnqueue                        sync.RWMutex
	lockNodeUpgradeStatusControllerMockGeneric                        sync.RWMutex
	lockNodeUpgradeStatusControllerMockInformer                       sync.RWMutex
	lockNodeUpgradeStatusControllerMockLister                         sync.RWMutex
	lockNodeUpgradeStatusControllerMockStart                          sync.RWMutex
	lockNodeUpgradeStatusControllerMockSync                           sync.RWMutex
)

// Ensure, that NodeUpgradeStatusControllerMock does implement NodeUpgradeStatusController.
// If this is not the case, regenerate this file with moq.
var _ v3.NodeUpgradeStatusController = &NodeUpgradeStatusControllerMock{}

// NodeUpgradeStatusControllerMock is a mock implementation of NodeUpgradeStatusController.
//
//     func TestSomethingThatUsesNodeUpgradeStatusController(t *testing.T) {
//
//         // make and configure a mocked NodeUpgradeStatusController
//         mockedNodeUpgradeStatusController := &NodeUpgradeStatusControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.NodeUpgradeStatusHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.NodeUpgradeStatusHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.NodeUpgradeStatusHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.NodeUpgradeStatusHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.NodeUpgradeStatusLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedNodeUpgradeStatusController in code that requires NodeUpgradeStatusController
//         // and then make assertions.
//
//     }
type NodeUpgradeStatusControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.NodeUpgradeStatusHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.NodeUpgradeStatusHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.NodeUpgradeStatusHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.NodeUpgradeStatusHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.NodeUpgradeStatusLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.NodeUpgradeStatusHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.NodeUpgradeStatusHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.NodeUpgradeStatusHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.NodeUpgradeStatusHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *NodeUpgradeStatusControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.NodeUpgradeStatusHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("NodeUpgradeStatusControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but NodeUpgradeStatusController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.NodeUpgradeStatusHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockNodeUpgradeStatusControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockNodeUpgradeStatusControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedNodeUpgradeStatusController.AddClusterScopedFeatureHandlerCalls())
func (mock *NodeUpgradeStatusControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v3.NodeUpgradeStatusHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.NodeUpgradeStatusHandlerFunc
	}
	lockNodeUpgradeStatusControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockNodeUpgradeStatusControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *NodeUpgradeStatusControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.NodeUpgradeStatusHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("NodeUpgradeStatusControllerMock.AddClusterScopedHandlerFunc: method is nil but NodeUpgradeStatusController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.NodeUpgradeStatusHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockNodeUpgradeStatusControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockNodeUpgradeStatusControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedNodeUpgradeStatusController.AddClusterScopedHandlerCalls())
func (mock *NodeUpgradeStatusControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.NodeUpgradeStatusHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.NodeUpgradeStatusHandlerFunc
	}
	lockNodeUpgradeStatusControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockNodeUpgradeStatusControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *NodeUpgradeStatusControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.NodeUpgradeStatusHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("NodeUpgradeStatusControllerMock.AddFeatureHandlerFunc: method is nil but NodeUpgradeStatusController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.NodeUpgradeStatusHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockNodeUpgradeStatusControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockNodeUpgradeStatusControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedNodeUpgradeStatusController.AddFeatureHandlerCalls())
func (mock *NodeUpgradeStatusControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.NodeUpgradeStatusHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.NodeUpgradeStatusHandlerFunc
	}
	lockNodeUpgradeStatusControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockNodeUpgradeStatusControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *NodeUpgradeStatusControllerMock) AddHandler(ctx context.Context, name string, handler v3.NodeUpgradeStatusHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("NodeUpgradeStatusControllerMock.AddHandlerFunc: method is nil but NodeUpgradeStatusController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.NodeUpgradeStatusHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockNodeUpgradeStatusControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockNodeUpgradeStatusControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedNodeUpgradeStatusController.AddHandlerCalls())
func (mock *NodeUpgradeStatusControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.NodeUpgradeStatusHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.NodeUpgradeStatusHandlerFunc
	}
	lockNodeUpgradeStatusControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockNodeUpgradeStatusControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *NodeUpgradeStatusControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("NodeUpgradeStatusControllerMock.EnqueueFunc: method is nil but NodeUpgradeStatusController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockNodeUpgradeStatusControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockNodeUpgradeStatusControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedNodeUpgradeStatusController.EnqueueCalls())
func (mock *NodeUpgradeStatusControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockNodeUpgradeStatusControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockNodeUpgradeStatusControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *NodeUpgradeStatusControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("NodeUpgradeStatusControllerMock.GenericFunc: method is nil but NodeUpgradeStatusController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockNodeUpgradeStatusControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockNodeUpgradeStatusControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedNodeUpgradeStatusController.GenericCalls())
func (mock *NodeUpgradeStatusControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockNodeUpgradeStatusControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockNodeUpgradeStatusControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *NodeUpgradeStatusControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("NodeUpgradeStatusControllerMock.InformerFunc: method is nil but NodeUpgradeStatusController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockNodeUpgradeStatusControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockNodeUpgradeStatusControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedNodeUpgradeStatusController.InformerCalls())
func (mock *NodeUpgradeStatusControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockNodeUpgradeStatusControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockNodeUpgradeStatusControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *NodeUpgradeStatusControllerMock) Lister() v3.NodeUpgradeStatusLister {
	if mock.ListerFunc == nil {
		panic("NodeUpgradeStatusControllerMock.ListerFunc: method is nil but NodeUpgradeStatusController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockNodeUpgradeStatusControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockNodeUpgradeStatusControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedNodeUpgradeStatusController.ListerCalls())
func (mock *NodeUpgradeStatusControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockNodeUpgradeStatusControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockNodeUpgradeStatusControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *NodeUpgradeStatusControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("NodeUpgradeStatusControllerMock.StartFunc: method is nil but NodeUpgradeStatusController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockNodeUpgradeStatusControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockNodeUpgradeStatusControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedNodeUpgradeStatusController.StartCalls())
func (mock *NodeUpgradeStatusControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockNodeUpgradeStatusControllerMockStart.RLock()
	calls = mock.calls.Start
	lockNodeUpgradeStatusControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *NodeUpgradeStatusControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("NodeUpgradeStatusControllerMock.SyncFunc: method is nil but NodeUpgradeStatusController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockNodeUpgradeStatusControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockNodeUpgradeStatusControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedNodeUpgradeStatusController.SyncCalls())
func (mock *NodeUpgradeStatusControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockNodeUpgradeStatusControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockNodeUpgradeStatusControllerMockSync.RUnlock()
	return calls
}

var (
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockAddFeatureHandler                sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockAddHandler                       sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockAddLifecycle                     sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockController                       sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockCreate                           sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockDelete                           sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockDeleteCollection                 sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockGet                              sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockGetNamespaced                    sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockList                             sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockListNamespaced                   sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockObjectClient                     sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockUpdate                           sync.RWMutex
	lockNodeUpgradeStatusInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that NodeUpgradeStatusInterfaceMock does implement NodeUpgradeStatusInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.NodeUpgradeStatusInterface = &NodeUpgradeStatusInterfaceMock{}

// NodeUpgradeStatusInterfaceMock is a mock implementation of NodeUpgradeStatusInterface.
//
//     func TestSomethingThatUsesNodeUpgradeStatusInterface(t *testing.T) {
//
//         // make and configure a mocked NodeUpgradeStatusInterface
//         mockedNodeUpgradeStatusInterface := &NodeUpgradeStatusInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.NodeUpgradeStatusHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.NodeUpgradeStatusLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.NodeUpgradeStatusHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.NodeUpgradeStatusLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.NodeUpgradeStatusHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v3.NodeUpgradeStatusLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.NodeUpgradeStatusHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.NodeUpgradeStatusLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.NodeUpgradeStatusController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.NodeUpgradeStatus) (*v3.NodeUpgradeStatus, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.NodeUpgradeStatus, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.NodeUpgradeStatus, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.NodeUpgradeStatusList, error) {
// 	               panic("mock out the List method")
//             },
//             ListNamespacedFunc: func(namespace string, opts v1.ListOptions) (*v3.NodeUpgradeStatusList, error) {
// 	               panic("mock out the ListNamespaced method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.NodeUpgradeStatus) (*v3.NodeUpgradeStatus, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedNodeUpgradeStatusInterface in code that requires NodeUpgradeStatusInterface
//         // and then make assertions.
//
//     }
type NodeUpgradeStatusInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.NodeUpgradeStatusHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.NodeUpgradeStatusLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.NodeUpgradeStatusHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.NodeUpgradeStatusLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.NodeUpgradeStatusHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v3.NodeUpgradeStatusLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.NodeUpgradeStatusHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.NodeUpgradeStatusLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.NodeUpgradeStatusController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.NodeUpgradeStatus) (*v3.NodeUpgradeStatus, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.NodeUpgradeStatus, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.NodeUpgradeStatus, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.NodeUpgradeStatusList, error)

	// ListNamespacedFunc mocks the ListNamespaced method.
	ListNamespacedFunc func(namespace string, opts v1.ListOptions) (*v3.NodeUpgradeStatusList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.NodeUpgradeStatus) (*v3.NodeUpgradeStatus, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.NodeUpgradeStatusHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.NodeUpgradeStatusLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.NodeUpgradeStatusHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.NodeUpgradeStatusLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.NodeUpgradeStatusHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.NodeUpgradeStatusLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.NodeUpgradeStatusHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.NodeUpgradeStatusLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.NodeUpgradeStatus
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ListNamespaced holds details about calls to the ListNamespaced method.
		ListNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.NodeUpgradeStatus
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *NodeUpgradeStatusInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.NodeUpgradeStatusHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but NodeUpgradeStatusInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.NodeUpgradeStatusHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *NodeUpgradeStatusInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v3.NodeUpgradeStatusHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.NodeUpgradeStatusHandlerFunc
	}
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *NodeUpgradeStatusInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.NodeUpgradeStatusLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but NodeUpgradeStatusInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.NodeUpgradeStatusLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *NodeUpgradeStatusInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v3.NodeUpgradeStatusLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.NodeUpgradeStatusLifecycle
	}
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *NodeUpgradeStatusInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.NodeUpgradeStatusHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.AddClusterScopedHandlerFunc: method is nil but NodeUpgradeStatusInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.NodeUpgradeStatusHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.AddClusterScopedHandlerCalls())
func (mock *NodeUpgradeStatusInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.NodeUpgradeStatusHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.NodeUpgradeStatusHandlerFunc
	}
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *NodeUpgradeStatusInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.NodeUpgradeStatusLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but NodeUpgradeStatusInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.NodeUpgradeStatusLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.AddClusterScopedLifecycleCalls())
func (mock *NodeUpgradeStatusInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.NodeUpgradeStatusLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.NodeUpgradeStatusLifecycle
	}
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockNodeUpgradeStatusInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *NodeUpgradeStatusInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.NodeUpgradeStatusHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.AddFeatureHandlerFunc: method is nil but NodeUpgradeStatusInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.NodeUpgradeStatusHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockNodeUpgradeStatusInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockNodeUpgradeStatusInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.AddFeatureHandlerCalls())
func (mock *NodeUpgradeStatusInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.NodeUpgradeStatusHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.NodeUpgradeStatusHandlerFunc
	}
	lockNodeUpgradeStatusInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockNodeUpgradeStatusInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *NodeUpgradeStatusInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v3.NodeUpgradeStatusLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.AddFeatureLifecycleFunc: method is nil but NodeUpgradeStatusInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.NodeUpgradeStatusLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockNodeUpgradeStatusInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockNodeUpgradeStatusInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.AddFeatureLifecycleCalls())
func (mock *NodeUpgradeStatusInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v3.NodeUpgradeStatusLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.NodeUpgradeStatusLifecycle
	}
	lockNodeUpgradeStatusInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockNodeUpgradeStatusInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *NodeUpgradeStatusInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.NodeUpgradeStatusHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.AddHandlerFunc: method is nil but NodeUpgradeStatusInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.NodeUpgradeStatusHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockNodeUpgradeStatusInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockNodeUpgradeStatusInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.AddHandlerCalls())
func (mock *NodeUpgradeStatusInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.NodeUpgradeStatusHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.NodeUpgradeStatusHandlerFunc
	}
	lockNodeUpgradeStatusInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockNodeUpgradeStatusInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *NodeUpgradeStatusInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.NodeUpgradeStatusLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.AddLifecycleFunc: method is nil but NodeUpgradeStatusInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.NodeUpgradeStatusLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockNodeUpgradeStatusInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockNodeUpgradeStatusInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.AddLifecycleCalls())
func (mock *NodeUpgradeStatusInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.NodeUpgradeStatusLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.NodeUpgradeStatusLifecycle
	}
	lockNodeUpgradeStatusInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockNodeUpgradeStatusInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *NodeUpgradeStatusInterfaceMock) Controller() v3.NodeUpgradeStatusController {
	if mock.ControllerFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.ControllerFunc: method is nil but NodeUpgradeStatusInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockNodeUpgradeStatusInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockNodeUpgradeStatusInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.ControllerCalls())
func (mock *NodeUpgradeStatusInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockNodeUpgradeStatusInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockNodeUpgradeStatusInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *NodeUpgradeStatusInterfaceMock) Create(in1 *v3.NodeUpgradeStatus) (*v3.NodeUpgradeStatus, error) {
	if mock.CreateFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.CreateFunc: method is nil but NodeUpgradeStatusInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.NodeUpgradeStatus
	}{
		In1: in1,
	}
	lockNodeUpgradeStatusInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockNodeUpgradeStatusInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.CreateCalls())
func (mock *NodeUpgradeStatusInterfaceMock) CreateCalls() []struct {
	In1 *v3.NodeUpgradeStatus
} {
	var calls []struct {
		In1 *v3.NodeUpgradeStatus
	}
	lockNodeUpgradeStatusInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockNodeUpgradeStatusInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *NodeUpgradeStatusInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.DeleteFunc: method is nil but NodeUpgradeStatusInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockNodeUpgradeStatusInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockNodeUpgradeStatusInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.DeleteCalls())
func (mock *NodeUpgradeStatusInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockNodeUpgradeStatusInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockNodeUpgradeStatusInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *NodeUpgradeStatusInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.DeleteCollectionFunc: method is nil but NodeUpgradeStatusInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockNodeUpgradeStatusInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockNodeUpgradeStatusInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.DeleteCollectionCalls())
func (mock *NodeUpgradeStatusInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockNodeUpgradeStatusInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockNodeUpgradeStatusInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *NodeUpgradeStatusInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.DeleteNamespacedFunc: method is nil but NodeUpgradeStatusInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockNodeUpgradeStatusInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockNodeUpgradeStatusInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.DeleteNamespacedCalls())
func (mock *NodeUpgradeStatusInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockNodeUpgradeStatusInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockNodeUpgradeStatusInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *NodeUpgradeStatusInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.NodeUpgradeStatus, error) {
	if mock.GetFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.GetFunc: method is nil but NodeUpgradeStatusInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockNodeUpgradeStatusInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockNodeUpgradeStatusInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.GetCalls())
func (mock *NodeUpgradeStatusInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockNodeUpgradeStatusInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockNodeUpgradeStatusInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *NodeUpgradeStatusInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.NodeUpgradeStatus, error) {
	if mock.GetNamespacedFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.GetNamespacedFunc: method is nil but NodeUpgradeStatusInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockNodeUpgradeStatusInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockNodeUpgradeStatusInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.GetNamespacedCalls())
func (mock *NodeUpgradeStatusInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockNodeUpgradeStatusInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockNodeUpgradeStatusInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *NodeUpgradeStatusInterfaceMock) List(opts v1.ListOptions) (*v3.NodeUpgradeStatusList, error) {
	if mock.ListFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.ListFunc: method is nil but NodeUpgradeStatusInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockNodeUpgradeStatusInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockNodeUpgradeStatusInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.ListCalls())
func (mock *NodeUpgradeStatusInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockNodeUpgradeStatusInterfaceMockList.RLock()
	calls = mock.calls.List
	lockNodeUpgradeStatusInterfaceMockList.RUnlock()
	return calls
}

// ListNamespaced calls ListNamespacedFunc.
func (mock *NodeUpgradeStatusInterfaceMock) ListNamespaced(namespace string, opts v1.ListOptions) (*v3.NodeUpgradeStatusList, error) {
	if mock.ListNamespacedFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.ListNamespacedFunc: method is nil but NodeUpgradeStatusInterface.ListNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockNodeUpgradeStatusInterfaceMockListNamespaced.Lock()
	mock.calls.ListNamespaced = append(mock.calls.ListNamespaced, callInfo)
	lockNodeUpgradeStatusInterfaceMockListNamespaced.Unlock()
	return mock.ListNamespacedFunc(namespace, opts)
}

// ListNamespacedCalls gets all the calls that were made to ListNamespaced.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.ListNamespacedCalls())
func (mock *NodeUpgradeStatusInterfaceMock) ListNamespacedCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockNodeUpgradeStatusInterfaceMockListNamespaced.RLock()
	calls = mock.calls.ListNamespaced
	lockNodeUpgradeStatusInterfaceMockListNamespaced.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *NodeUpgradeStatusInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.ObjectClientFunc: method is nil but NodeUpgradeStatusInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockNodeUpgradeStatusInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockNodeUpgradeStatusInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.ObjectClientCalls())
func (mock *NodeUpgradeStatusInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockNodeUpgradeStatusInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockNodeUpgradeStatusInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *NodeUpgradeStatusInterfaceMock) Update(in1 *v3.NodeUpgradeStatus) (*v3.NodeUpgradeStatus, error) {
	if mock.UpdateFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.UpdateFunc: method is nil but NodeUpgradeStatusInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.NodeUpgradeStatus
	}{
		In1: in1,
	}
	lockNodeUpgradeStatusInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockNodeUpgradeStatusInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.UpdateCalls())
func (mock *NodeUpgradeStatusInterfaceMock) UpdateCalls() []struct {
	In1 *v3.NodeUpgradeStatus
} {
	var calls []struct {
		In1 *v3.NodeUpgradeStatus
	}
	lockNodeUpgradeStatusInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockNodeUpgradeStatusInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *NodeUpgradeStatusInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("NodeUpgradeStatusInterfaceMock.WatchFunc: method is nil but NodeUpgradeStatusInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockNodeUpgradeStatusInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockNodeUpgradeStatusInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedNodeUpgradeStatusInterface.WatchCalls())
func (mock *NodeUpgradeStatusInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockNodeUpgradeStatusInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockNodeUpgradeStatusInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockNodeUpgradeStatusesGetterMockNodeUpgradeStatuses sync.RWMutex
)

// Ensure, that NodeUpgradeStatusesGetterMock does implement NodeUpgradeStatusesGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.NodeUpgradeStatusesGetter = &NodeUpgradeStatusesGetterMock{}

// NodeUpgradeStatusesGetterMock is a mock implementation of NodeUpgradeStatusesGetter.
//
//     func TestSomethingThatUsesNodeUpgradeStatusesGetter(t *testing.T) {
//
//         // make and configure a mocked NodeUpgradeStatusesGetter
//         mockedNodeUpgradeStatusesGetter := &NodeUpgradeStatusesGetterMock{
//             NodeUpgradeStatusesFunc: func(namespace string) v3.NodeUpgradeStatusInterface {
// 	               panic("mock out the NodeUpgradeStatuses method")
//             },
//         }
//
//         // use mockedNodeUpgradeStatusesGetter in code that requires NodeUpgradeStatusesGetter
//         // and then make assertions.
//
//     }
type NodeUpgradeStatusesGetterMock struct {
	// NodeUpgradeStatusesFunc mocks the NodeUpgradeStatuses method.
	NodeUpgradeStatusesFunc func(namespace string) v3.NodeUpgradeStatusInterface

	// calls tracks calls to the methods.
	calls struct {
		// NodeUpgradeStatuses holds details about calls to the NodeUpgradeStatuses method.
		NodeUpgradeStatuses []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// NodeUpgradeStatuses calls NodeUpgradeStatusesFunc.
func (mock *NodeUpgradeStatusesGetterMock) NodeUpgradeStatuses(namespace string) v3.NodeUpgradeStatusInterface {
	if mock.NodeUpgradeStatusesFunc == nil {
		panic("NodeUpgradeStatusesGetterMock.NodeUpgradeStatusesFunc: method is nil but NodeUpgradeStatusesGetter.NodeUpgradeStatuses was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockNodeUpgradeStatusesGetterMockNodeUpgradeStatuses.Lock()
	mock.calls.NodeUpgradeStatuses = append(mock.calls.NodeUpgradeStatuses, callInfo)
	lockNodeUpgradeStatusesGetterMockNodeUpgradeStatuses.Unlock()
	return mock.NodeUpgradeStatusesFunc(namespace)
}

// NodeUpgradeStatusesCalls gets all the calls that were made to NodeUpgradeStatuses.
// Check the length with:
//     len(mockedNodeUpgradeStatusesGetter.NodeUpgradeStatusesCalls())
func (mock *NodeUpgradeStatusesGetterMock) NodeUpgradeStatusesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockNodeUpgradeStatusesGetterMockNodeUpgradeStatuses.RLock()
	calls = mock.calls.NodeUpgradeStatuses
	lockNodeUpgradeStatusesGetterMockNodeUpgradeStatuses.RUnlock()
	return calls
}
